# '47. У вас есть код, который вы не можете менять(так часто бывает, когда код в глубине программы используется множество раз и вы не хотите ничего сломать):
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений, а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился копией values.

# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(lambda x: x, values))
# print(transormed_values)


# '51. Напишите функцию same_by(characteristic, objects), которая проверяет, 
# все ли объекты имеют одинаковое значение некоторой характеристики, и возвращают True, если это так. 
# Если значение характеристики для разных объектов отличается - то False. Для пустого набора объектов, функция должна возвращать True. 
# Аргумент characteristic - это функция, которая принимает объект и вычисляет его характеристику.
# В качестве примера характеристики можно взять проверку четности из лекции, а можно придумать свою.

# def same_by(characteristic, objects):
#     new = list(filter(characteristic, objects))
#     print(new)

#     if new == objects:
#         return(True)
#     return(False)

# def char(x):
#     return x % 2 == 0

# values = [1, 2, 4, 5, 6, 7]
# print(all(map(lambda x: x % 2 == 0, values)))
# print(same_by(char, values))

# '49. Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. 
# Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета. 
# Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты. 
# Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. 
# Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса. 
# Площадь эллипса вычисляется по формуле S = piab, где a и b - длины полуосей эллипса. При решении задачи используйте списочные выражения. 
# Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую площадь. Гарантируется, что самая далекая планета ровно одна

# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# Вывод:
# 2.5 10

# def find_farthest_orbit(list_of_orbits):
#     p = 3.14
#     max = 0
#     for i in list_of_orbits:
#         if i[0] == i[1]:
#             s = 0
#         else:
#             s = p * i[0] * i[1]
#         if s > max:
#             max = s
#             max_elem = i
#     return max_elem

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(max(orbits, key=lambda x: x[0]*x[1] if x[0] != x[1] else 0))
# print(find_farthest_orbit(orbits))
